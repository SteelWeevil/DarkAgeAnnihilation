<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_human</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
spd=3;
move_timer=room_speed*4;
health_timer=room_speed*4;
comp_met=false;
dev_timer=0;
focus="none";
device_is_reached=false;
path_device=noone;
my_path = path_add();
nearest_device=noone;
energy_timer = room_speed * 10;
energy_interval = room_speed * 10;
x_random=1000;
y_random=1200;
path_random=noone;
random_path=false;
random_interval=room_speed*3+irandom(room_speed*2);
random_timer=random_interval;


//Create attached need objects
need_food=instance_create(x,y,par_needs);
need_food.value= 4+irandom_range(1,6);
need_food.increment= room_speed * 3;
need_food.threshold=5;
need_sleep=instance_create(x,y,par_needs);
need_sleep.value= 6+irandom_range(1,4);
need_sleep.increment= room_speed * 7;
happiness = 5;
paranoia = 0;
para_timer = room_speed * 4 + irandom(room_speed);
para_interval = room_speed * 4;


name_list = ds_list_create();
ds_list_add(name_list, "Bob");
ds_list_add(name_list, "Jeff");
ds_list_add(name_list, "Max");
ds_list_add(name_list, "Greg");
ds_list_add(name_list, "Steve");
ds_list_add(name_list, "Sarah");
ds_list_add(name_list, "Kim");
ds_list_add(name_list, "Julie");
ds_list_add(name_list, "Jenni");

human_name = name_list[|irandom_range(0,9)]






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dev_timer-=1;

if(focus="none"){
    //decide focus
    
    if(need_food.is_needed){
        focus = "food";
    }
    else if(need_sleep.is_needed){
        focus = "sleep";
    }
    random_behavior = irandom(10);
    //overwrite previous focus with paranoid activities
    if (paranoia&gt;75){
        if random_behavior&lt;3 {
            focus ="attack";
        }
        else if random_behavior&lt;4 {
            focus="murder";
        }
        else if random_behavior&lt;6 {
            focus="break";
        }
        else if random_behavior&lt;8 {
            focus="random";
        }
        else if random_behavior&lt;9 {
            focus="computer";
        }
    }
    else if (paranoia&gt;50){
        if random_behavior&lt;2 {
            focus ="attack";
        }
        else if random_behavior&lt;3 {
            focus="break";
        }
        else if random_behavior&lt;6 {
            focus="random";
        }
        else if random_behavior&lt;9 {
            focus="computer";
        }
    }
}
if(focus = "food"){
    //get food
    path_device=path_add();
    nearest_device=scr_not_broken_nearest(x,y,obj_device_food);
    if mp_grid_path(grid,path_device,x,y,nearest_device.x,nearest_device.y,1) {
        path_assign(my_path, path_device);
        path_delete(path_device);
    }
   if (instance_place(x,y,obj_device_food)){
        if (dev_timer&lt;=0){
            need_food.value+=1;
            dev_timer=room_speed;
        }
        if need_food.value &gt;=10{
            need_food.value = 10;
            need_food.is_needed=false;
            focus = "none";
        }    
   }    
}

if(focus = "sleep"){
    //get food
    path_device=path_add();
    nearest_device=scr_not_broken_nearest(x,y,obj_device_sleep);
    if mp_grid_path(grid,path_device,x,y,nearest_device.x,nearest_device.y,1) {
        path_assign(my_path, path_device);
        path_delete(path_device);
    }
   if (instance_place(x,y,obj_device_sleep)){
        if (dev_timer&lt;=0){
            need_sleep.value+=1;
            dev_timer=room_speed;
        }
        if need_sleep.value &gt;=10{
            need_sleep.value = 10;
            need_sleep.is_needed=false;
            focus = "none";
        }    
   }    
}
if (focus = "attack"){
    focus = "random";
}
if (focus = "murder"){
    focus = "random";
};
if (focus = "break"){
    focus = "random";
};


//a human with a focus of computer
if (focus = "computer"){
    path_device=path_add();
    nearest_device=scr_not_broken_nearest(x,y,obj_computer);
    if mp_grid_path(grid,path_device,x,y,nearest_device.x,nearest_device.y,1) {
        path_assign(my_path, path_device);
        path_delete(path_device);
    }
    if (instance_place(x,y,obj_computer)){
        focus="none"
    }
}

if (focus = "random"){
        if (!random_path){
            x_random=irandom_range(500,1400);
            y_random=irandom_range(1000,1500);
            random_path = true;
        }
        path_device=path_add();
        if mp_grid_path(grid,path_device,x,y,x_random,y_random,1) {
            path_assign(my_path, path_device);
            path_delete(path_device);
        }
        random_timer-=1;
        if(random_timer&lt;=0){
            focus="none";
            random_path = false;
            random_timer = random_interval;
            paranoia -=5;
        }
}

//when a human has no focus they will check the computer and wait for something else to do
if (focus = "none"){
    path_device=path_add();
    nearest_device=scr_not_broken_nearest(x,y,obj_computer);
    if mp_grid_path(grid,path_device,x,y,nearest_device.x,nearest_device.y,1) {
        path_assign(my_path, path_device);
        path_delete(path_device);
    }
} 

path_start(my_path,spd,path_action_stop,true);

//Energy Consumption Rate
energy_timer -= 1;

if energy_timer &lt;= 0 {
    energy -= 1;
    energy_timer = energy_interval;
}

//happiness calculation
happiness= (need_food.value+need_sleep.value)/2;

//Paranoia calculations
if happiness &lt; 5 {
    para_timer -= 1;
    if para_timer &lt;= 0 {
        paranoia +=1;
        if paranoia &gt;= 100 {
            paranoia = 100;
        }
        para_timer = para_interval;
    }
}
else if happiness &gt; 6{
    para_timer -= 1;
    if para_timer &lt;= 0 {
        paranoia -=1;
        if paranoia &lt;= 0 {
            paranoia = 0;
        }
        para_timer = para_interval;
    }
}

//If a body is found
human_dead = scr_nearest_dead(x,y,obj_human_dead);

if human_dead {
    if instance_place(x,y, human_dead){
        human_dead.dead_found_already = true;
        paranoia +=20;
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(16,48, "Need Food Value: " + string(need_food.value));
draw_text(16,64, "Need Sleep Value: " + string(need_sleep.value));
draw_text(16,80, "Happiness: " + string(happiness));
draw_text(16,96, "Paranoia: " + string(paranoia));
draw_text(16,112, "Focus: " + string(focus));
draw_text(16,128, "Focus: " + string(random_behavior));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(spr_human, 0, x, y);
draw_text(x, y-36, human_name);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
